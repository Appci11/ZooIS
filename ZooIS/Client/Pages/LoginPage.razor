@page "/login"
@using System.Text.RegularExpressions;
@using ZooIS.Client.Services.AuthService;
@using ZooIS.Client.Services.UsersService;

@inject NavigationManager _navigationManager
@inject IAuthService _authService
@inject IUsersService _usersService

<MudContainer MaxWidth="MaxWidth.Small" Style="margin-top:15px;">
    <MudItem xs="12" sm="7" Style="padding-bottom:5px;">
        <EditForm Model="@user" OnValidSubmit="HandleLogin">
            <MudTextField @bind-Value="user.Username" T="string" Label="Vartotojo vardas" Required="true" RequiredError="Neįvestas vartotojo vardas." @ref="focusTarget" />
            <MudTextField @bind-Value="user.Password" T="string" Label="Slaptažodis" InputType="InputType.Password" Required="true" RequiredError="Neįvestas slaptažodis." @ref="focusTarget2" />
            <br />
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Prisijungti</MudButton>
        </EditForm>
        <MudText Color="errorMsgColor" Style="padding-top:10px;">@errorMsg</MudText>
    </MudItem>
    @if (passChange)
    {
        <MudItem xs="12" sm="7">
            <MudForm @bind-IsValid="@success2">
                <MudTextField @bind-Value="pass2_1" T="string" Label="Naujas slaptažodis" InputType="InputType.Password" Required="true" RequiredError="Neįvestas slaptažodis pakeitimui."
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordCheck))" @ref="focusTarget3" />
                <MudTextField @bind-Value="pass2_2" T="string" Label="Naujo slaptažodžio pakartojimas" InputType="InputType.Password" Required="true" RequiredError="Neįvestas pakartotinis slaptažodis."
                          Validation="@(new Func<string, string>(PasswordMatch))" />
                <br />
                <MudButton OnClick="HandlePassChange" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success2)" Class="ml-auto" Style="padding-bottom:10px;">Keisti slaptažodį</MudButton>
            </MudForm>
            <MudText Color="@Color.Error">@errorMsg2</MudText>
        </MudItem>
    }
</MudContainer>
@code {
    AuthUserDto user = new AuthUserDto();
    MudTextField<string>? focusTarget;
    MudTextField<string>? focusTarget2;
    MudTextField<string>? focusTarget3;

    string errorMsg = string.Empty;
    Color errorMsgColor = Color.Error;

    bool passChange = false;
    AuthUserDto? user2; // atsarginei kopija, pries isvalant "login" formos slaptazodi
    bool success2;
    string pass2_1 = string.Empty;
    string pass2_2 = string.Empty;
    private string errorMsg2 = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            if (focusTarget != null)
                await focusTarget.SelectAsync();
    }

    async Task HandleLogin()
    {
        bool stayLogged = true; //Sutvarkyt
        int loginResponse = await _authService.Login(user, stayLogged);
        switch (loginResponse)
        {
            case 0:     //sutartine reiksme, login failed
                errorMsgColor = Color.Error;
                errorMsg = "Neteisingas vartotojo vardas arba slaptažodis";
                break;
            case 1:     //sutartine reiksme, login success
                _navigationManager.NavigateTo("/");
                break;
            case 2:     //sutartine reiksme, require password change
                errorMsgColor = Color.Dark;
                await focusTarget3.SelectAsync();
                RequestPasswordChange();
                break;
        }
    }

    void RequestPasswordChange()
    {

        user2 = new AuthUserDto();
        user2.Username = user.Username;
        user2.Password = user.Password;
        errorMsg = "Reikalingas slaptažodžio pakeitimas. Prašome užpildyti naujus slaptažodžio duomenis.";
        passChange = true;
    }

    async Task HandlePassChange()
    {
        UpdatePasswordDto dto = new UpdatePasswordDto(user2.Username, pass2_1);
        if (await _usersService.UpdatePassword(dto))
        {
            passChange = false;
            errorMsg = "Slaptažodis pakeistas sėkmingai. Prašome jungtis naudojant naująjį slaptažodį.";
            user.Password = string.Empty;
            await focusTarget2.SelectAsync();
        }
        else
        {
            errorMsg2 = "Slaptažodis nepakeistas. Bandykite dar kartą arba kreipkitės į administraciją.";
        }
    }

    private IEnumerable<string> PasswordCheck(string pass)
    {
        if (string.IsNullOrWhiteSpace(pass))
        {
            yield return "Prašome įvesti naują slaptažodį";
            yield break;
        }
        if (pass.Length < 4)
            yield return "Reikalingi bent 4 simboliai";
        if (!Regex.IsMatch(pass, @"[A-Z]"))
            yield return "Bent viena didžioji raidė";
        if (!Regex.IsMatch(pass, @"[a-z]"))
            yield return "Bent viena mažoji raidė";
        if (!Regex.IsMatch(pass, @"[0-9]"))
            yield return "Bent vienas skaitmuo";
    }

    private string PasswordMatch(string arg)
    {
        if (pass2_1 != arg)
            return "Nesutampa slaptažodžiai.";
        if (user2!.Password == arg)
            return "Naujas slaptažodis negali sutapti su senuoju";
        return null;
    }
}