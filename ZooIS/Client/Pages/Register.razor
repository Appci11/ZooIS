@page "/register"
@using System.ComponentModel.DataAnnotations;
@using System.Text.RegularExpressions;
@using ZooIS.Client.Services.AuthService;
@using ZooIS.Shared.Dto;

@inject NavigationManager _navigationManager
@inject IAuthService _authService

<MudItem xs="12" sm="7">
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@formErrors">
        <MudTextField @bind-Value="user.Username" T="string" Label="Vartotojo vardas" Required="true" RequiredError="Neįvestas vartotojo vardas." @ref="focusTarget" />
        <MudTextField @bind-Value="user.Email" T="string" Label="Elektroninis paštas" Required="true" RequiredError="Neįvestas el pašto adresas."
                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "Netaisyklingas el pašto adresas"})" />
        <MudTextField @bind-Value="user.Password" T="string" Label="Slaptažodis" @ref="pass1" InputType="InputType.Password"
                      Validation="@(new Func<string, IEnumerable<string>>(PasswordCheck))" Required="true"
                      RequiredError="Neįvestas slaptažodis." />
        <MudTextField T="string"
                      Label="Pakartotas slaptažodis" InputType="InputType.Password"
                      Validation="@(new Func<string, string>(PasswordMatch))"
                      Required="true" RequiredError="Neįvestas pakartotas slaptažodis." />
        <br />
        <MudButton OnClick="HandleRegister" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Registruotis</MudButton>
    </MudForm>
    <MudText Color="@Color.Error">@registrationError</MudText>
</MudItem>

@code {
    bool success;
    string[] formErrors = { };
    string registrationError = string.Empty;
    MudTextField<string>? pass1;
    MudForm? form = new MudForm();
    private MudTextField<string>? focusTarget;

    RegisterUserDto user = new RegisterUserDto();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            if (focusTarget != null)
                await focusTarget.SelectAsync();
    }

    private IEnumerable<string> PasswordCheck(string pass)
    {
        if (string.IsNullOrWhiteSpace(pass))
        {
            yield return "Prašome įvesti slaptažodį";
            yield break;
        }
        if (pass.Length < 4)
            yield return "Reikalingi bent 4 simboliai";
        if (!Regex.IsMatch(pass, @"[A-Z]"))
            yield return "Bent viena didžioji raidė";
        if (!Regex.IsMatch(pass, @"[a-z]"))
            yield return "Bent viena mažoji raidė";
        if (!Regex.IsMatch(pass, @"[0-9]"))
            yield return "Bent vienas skaitmuo";
    }

    private string PasswordMatch(string arg)
    {
        if (pass1.Value != arg)
            return "Nesutampa slaptažodžiai.";
        return null;
    }

    async Task HandleRegister()
    {
        if (await _authService.Register(user))
        {
            registrationError = string.Empty;
            _navigationManager.NavigateTo("/");
            Console.WriteLine("Registration success...!!!!");            
        }
        else
        {
            registrationError = "Vartotojas tokiu vardu jau egzistuoja. Prašome pasirinkti kita vardą.";
        }
    }
}




