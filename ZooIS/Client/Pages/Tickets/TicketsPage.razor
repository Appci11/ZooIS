@page "/tickets"

@using ZooIS.Client.Services.TicketsService
@inject ITicketsService _TicketService
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService

<PageTitle>Bilietai</PageTitle>

@if (loaded)
{
    <MudTable Items="@_TicketService.Tickets" Dense="true" Filter="new Func<Ticket, bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Egzistuojantys bilietų tipai</MudText>
            <MudIconButton Href="/ticket" Icon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" />
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Ieškoti" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Ticket, object>(u=>u.Name)">Pavadinimas</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Ticket, object>(u=>u.Price)">Kaina</MudTableSortLabel></MudTh>
            <MudTh>Redaguoti / Šalinti</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Pavadinimas">@context.Name</MudTd>
            <MudTd DataLabel="Kaina">@context.Price</MudTd>
            <MudTd>
                <MudIconButton Href="@($"/ticket/{context.Id}")" Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" />
                <MudIconButton OnClick="(() => DeleteUser(context.Id))" Size="@Size.Small" Icon="@Icons.Material.Filled.RemoveCircleOutline" Color="Color.Warning" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Įrašai per puslapį" />
        </PagerContent>
    </MudTable>
}
else
{
    <div class="loader">Loading...</div>
}

@code {
    bool loaded;
    string searchString = string.Empty;
    protected DeleteConfirmationDialog contifmationDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await _TicketService.GetTickets();
        loaded = true;
    }

    private bool FilterFunc(Ticket element) => FilterFunc1(element, searchString);

    private bool FilterFunc1(Ticket element, string searchStr)
    {
        if (string.IsNullOrWhiteSpace(searchStr))
            return true;
        if (element.Name.Contains(searchStr, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Price.ToString().Contains(searchStr, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    async Task DeleteUser(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("BodyText", "Tikrai pašalinti bilietą?");
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = _dialogService.Show<ConfirmDeletionDialog>("Šalinimas", parameters, options);

        if (!(await dialog.Result).Canceled)
        {
            await _TicketService.DeleteTicket(id);
        }
    }
}
