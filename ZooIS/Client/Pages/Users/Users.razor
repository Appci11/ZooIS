@page "/users"

@using ZooIS.Client.Dialogs;
@using ZooIS.Client.Services.UsersService;
@using ZooIS.Shared.Models;
@inject IUsersService _usersService
@inject NavigationManager _navigationManager
@*
@attribute [Authorize(Roles = "SysAdmin")]
*@

<PageTitle>Vartotojai</PageTitle>

@if (Loaded)
{
    <MudTable Items="@_usersService.Users" Dense="@true" Filter="new Func<RegisteredUser, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Registruoti vartotojai</MudText>
            <MudIconButton Href="/user" Icon="@Icons.Material.Filled.Add" Color="Color.Primary"/>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Ieškoti" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<RegisteredUser, object>(u=>u.Username)">Username</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<RegisteredUser, object>(u=>u.Role)">Rolė</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<RegisteredUser, object>(u=>u.DateCreated)">Registracijos data</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd @onclick="((x) => Kriu(context.Username))" DataLabel="Vardas">@context.Username</MudTd>
            <MudTd DataLabel="Rolė">@context.Role</MudTd>
            <MudTd DataLabel="Registracijos data">@context.DateCreated</MudTd>
            <MudTd><MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" @onclick="(() => Kriu(context.Username))" /></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Įrašai per puslapį" />
        </PagerContent>
    </MudTable>
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.Username</MudText>
    </div>



    @*
    <div>
        <QuickGrid Items="FilteredUsers" ResizableColumns Pagination="@pagination" Class="search">
            <PropertyColumn Property="u => u.Username" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Username..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="u => u.Role" Sortable="true" Class="search">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="roleFilter" @bind:event="oninput" placeholder="User role..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="u => u.DateCreated" Sortable="true" />
            <TemplateColumn Title="Actions">
                <button @onclick="@(() => GoToEdit(context))" class="btn btn-primary oi oi-pencil"></button>
                <button @onclick="@(() => Delete_Click(context))" class="btn btn-danger oi oi-x"></button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator Value="@pagination" />
    </div>
*@

    <button class="btn btn-primary" @onclick="CreateNewUser">Create a new user</button>

    <DeleteConfirmationDialog @ref="confirmationDialog" UserChoice="OnDeletionConfirmed" />
}
else
{
    <div class="loader">Loading...</div>
}

@code {
    int nrToDelete = -1;
    protected DeleteConfirmationDialog confirmationDialog { get; set; }
    bool Loaded = false;

    void Kriu(string vardas)
    {
        Console.WriteLine(vardas);
    }

    private string searchString = "";
    private RegisteredUser selectedItem1 = null;

    private bool FilterFunc1(RegisteredUser element) => FilterFunc(element, searchString);

    private bool FilterFunc(RegisteredUser element, string searchStr)
    {
        if (string.IsNullOrWhiteSpace(searchStr))
            return true;
        if (element.Username.Contains(searchStr, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Role.Contains(searchStr, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await _usersService.GetUsers();
        Loaded = true;
    }

    void CreateNewUser()
    {
        _navigationManager.NavigateTo("/user");
    }

    void GoToEdit(RegisteredUser u) => _navigationManager.NavigateTo($"/user/{u.Id}");

    void Delete_Click(RegisteredUser u)
    {
        nrToDelete = u.Id;
        confirmationDialog.Show();
    }

    protected async Task OnDeletionConfirmed(bool deleteConfirmed)
    {
        if (deleteConfirmed && nrToDelete != -1)
        {
            await _usersService.DeleteUser(nrToDelete);
            nrToDelete = -1;
        }
    }
}