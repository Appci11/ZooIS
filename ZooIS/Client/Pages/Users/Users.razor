@page "/users"

@using ZooIS.Client.Dialogs;
@using ZooIS.Client.Services.UsersService;
@using ZooIS.Shared.Models;
@inject IUsersService UsersService
@inject NavigationManager NavigationManager
@*
@attribute [Authorize(Roles = "SysAdmin")]
*@
<PageTitle>Users</PageTitle>

<h3>Users</h3>

@if (Loaded)
{
    <div>
        <QuickGrid Items="FilteredUsers" ResizableColumns Pagination="@pagination" Class="search">
            <PropertyColumn Property="u => u.Username" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Username..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="u => u.Role" Sortable="true" Class="search">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="roleFilter" @bind:event="oninput" placeholder="User role..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="u => u.DateCreated" Sortable="true" />
            <TemplateColumn Title="Actions">
                <button @onclick="@(() => GoToEdit(context))" class="btn btn-primary oi oi-pencil"></button>
                <button @onclick="@(() => Delete_Click(context))" class="btn btn-danger oi oi-x"></button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator Value="@pagination" />

    </div>
    <button class="btn btn-primary" @onclick="CreateNewUser">Create a new user</button>

    <DeleteConfirmationDialog @ref="confirmationDialog" UserChoice="OnDeletionConfirmed" />
}
else
{
    <div class="loader">Loading...</div>
}

@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<RegisteredUser>? itemsQueryable;
    string nameFilter;
    string roleFilter;
    int nrToDelete = -1;
    protected DeleteConfirmationDialog confirmationDialog { get; set; }

    bool Loaded = false;



    protected override async Task OnInitializedAsync()
    {
        await UsersService.GetUsers();
        itemsQueryable = UsersService.Users.AsQueryable();
        Loaded = true;
    }

    IQueryable<RegisteredUser> FilteredUsers
    {
        get
        {
            var result = itemsQueryable;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(u => u.Username.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            if (!string.IsNullOrEmpty(roleFilter))
            {
                result = result.Where(u => u.Role.Contains(roleFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }

    void ShowUser(int id)
    {
        NavigationManager.NavigateTo($"/user/{id}");
    }

    void CreateNewUser()
    {
        NavigationManager.NavigateTo("/user");
    }

    void GoToEdit(RegisteredUser u) => NavigationManager.NavigateTo($"/user/{u.Id}");

    void Delete_Click(RegisteredUser u)
    {
        nrToDelete = u.Id;
        confirmationDialog.Show();
    }

    protected async Task OnDeletionConfirmed(bool deleteConfirmed)
    {
        if (deleteConfirmed && nrToDelete != -1)
        {
            await UsersService.DeleteUser(nrToDelete);
            nrToDelete = -1;
            itemsQueryable = UsersService.Users.AsQueryable();
        }
    }
}