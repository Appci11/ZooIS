@page "/users"

@using ZooIS.Client.Dialogs;
@using ZooIS.Client.Services.UsersService;
@using ZooIS.Shared.Models;
@inject IUsersService _usersService
@inject NavigationManager _navigationManager
@*
@attribute [Authorize(Roles = "SysAdmin")]
*@

<PageTitle>Vartotojai</PageTitle>

@if (Loaded)
{
    <MudDataGrid Items="@_usersService.Users" Dense="true" Elevation="0" QuickFilter="@quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Registruoti sistemos vartotojai</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Ieškoti" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Title="Vardas" Property="u => u.Username" />
            <PropertyColumn Title="Rolė" Property="u => u.Role" />
            <PropertyColumn Title="Registracijos data" Property="u => u.DateCreated" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="RegisteredUser" />
        </PagerContent>
    </MudDataGrid>




    @*
    <div>
        <QuickGrid Items="FilteredUsers" ResizableColumns Pagination="@pagination" Class="search">
            <PropertyColumn Property="u => u.Username" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Username..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="u => u.Role" Sortable="true" Class="search">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="roleFilter" @bind:event="oninput" placeholder="User role..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="u => u.DateCreated" Sortable="true" />
            <TemplateColumn Title="Actions">
                <button @onclick="@(() => GoToEdit(context))" class="btn btn-primary oi oi-pencil"></button>
                <button @onclick="@(() => Delete_Click(context))" class="btn btn-danger oi oi-x"></button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator Value="@pagination" />
    </div>
*@

    <button class="btn btn-primary" @onclick="CreateNewUser">Create a new user</button>

    <DeleteConfirmationDialog @ref="confirmationDialog" UserChoice="OnDeletionConfirmed" />
}
else
{
    <div class="loader">Loading...</div>
}

@code {
    //PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<RegisteredUser>? itemsQueryable;
    string nameFilter;
    string roleFilter;
    int nrToDelete = -1;
    protected DeleteConfirmationDialog confirmationDialog { get; set; }
    private string searchString;

    bool Loaded = false;

    // quick filter - filter gobally across multiple columns with the same input
    private Func<RegisteredUser, bool> quickFilter => u =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (u.Username.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (u.Role.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if ($"{x.Number} {x.Position} {x.Molar}".Contains(_searchString))
        //    return true;
        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await _usersService.GetUsers();
        itemsQueryable = _usersService.Users.AsQueryable();
        Loaded = true;
    }

    IQueryable<RegisteredUser> FilteredUsers
    {
        get
        {
            var result = itemsQueryable;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(u => u.Username.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            if (!string.IsNullOrEmpty(roleFilter))
            {
                result = result.Where(u => u.Role.Contains(roleFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }

    //void ShowUser(int id)
    //{
    //    _navigationManager.NavigateTo($"/user/{id}");
    //}

    void CreateNewUser()
    {
        _navigationManager.NavigateTo("/user");
    }

    void GoToEdit(RegisteredUser u) => _navigationManager.NavigateTo($"/user/{u.Id}");

    void Delete_Click(RegisteredUser u)
    {
        nrToDelete = u.Id;
        confirmationDialog.Show();
    }

    protected async Task OnDeletionConfirmed(bool deleteConfirmed)
    {
        if (deleteConfirmed && nrToDelete != -1)
        {
            await _usersService.DeleteUser(nrToDelete);
            nrToDelete = -1;
            itemsQueryable = _usersService.Users.AsQueryable();
        }
    }
}