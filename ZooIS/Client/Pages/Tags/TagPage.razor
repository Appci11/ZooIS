@page "/tag"
@page "/tag/{id:int}"

@using ZooIS.Client.Services.TagsService
@inject NavigationManager _navigationManager
@inject ITagsService _tagsService

@if(Id == null)
{
    <PageTitle>Kūrimas</PageTitle>
    <h3>Naujos žymos kūrimas</h3>
}
else
{
    <PageTitle>Redaguoti</PageTitle>
    <h3>Zonos @tag.Name duomenų redagavimas</h3>
}

<MudContainer MaxWidth="MaxWidth.Large">
    <EditForm Model="@tag" OnValidSubmit="HandleSubmit">
        <MudTextField @bind-Value="tag.Name" Required="true" RequiredError="Neįvestas pavadinimas." Label="Žymos pavadinimas" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="tag.Description" Lines="5" Required="true" RequiredError="Neįvestas aprašas." Label="Žymos aprašas" Variant="Variant.Text"></MudTextField>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Style="margin-top:10px;">@submitBtnText</MudButton>
    </EditForm>
    <MudButton Href="/areas" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Style="margin-top:15px;">Gryžti</MudButton>
</MudContainer>

@code {
    [Parameter]
    public int? Id { get; set; }
    bool loaded;
    string submitBtnText = string.Empty;

    Tag tag = new();

    protected override async Task OnInitializedAsync()
    {
        submitBtnText = Id == null ? "Pridėti" : "Redaguoti";
        loaded = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id != null)
        {
            tag = await _tagsService.GetTag((int)Id);
            if(tag == null)
            {
                // Sutvarkyt add some error kai zinosiu kur 
                tag = new();
            }
        }
    }

    async Task HandleSubmit()
    {
        if(Id == null)
        {
            await _tagsService.CreateTag(tag);
            _navigationManager.NavigateTo("/tags");
        }
        else
        {
            await _tagsService.UpdateTag(tag);
            _navigationManager.NavigateTo("/tags");
        }
    }
}
