@page "/login"
@using ZooIS.Client.Services.AuthService;
@using ZooIS.Shared.Dto;

@inject NavigationManager _navigationManager
@inject IAuthService _authService

<MudItem xs="12" sm="7">
    <MudForm @bind-IsValid="@Success">
        <MudTextField @bind-Value="user.Username" T="string" Label="Vartotojo vardas" Required="true" RequiredError="Neįvestas vartotojo vardas." @ref="focusTarget" />
        <MudTextField @bind-Value="user.Password" T="string" Label="Slaptažodis" InputType="InputType.Password" Required="true" RequiredError="Neįvestas slaptažodis." />
        <br />
        <MudButton OnClick="HandleLogin" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Prisijungti</MudButton>
    </MudForm>
    <MudText Color="@Color.Error">@errorMsg</MudText>
</MudItem>


@*
<body>
    @if (passChangeRequired)
    {
        <EditForm Model="password" OnSubmit="HandlePasswordChange">
            <div>
                <InputText id="password" @bind-Value="password" type="password" />
                <label for="password">New password</label>
            </div>
            <div>
                <InputText id="password2" @bind-Value="password2" type="password" />
                <label for="password2">Repeat new password</label>
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Change</button>
            </div>
        </EditForm>
    }
    <br />
    <p style="color: @msgColor">@errorMsg</p>
    <br />
    <div>
        Not a member? <a href="register">Register</a>
    </div>
</body>
*@

@code {
    public bool kriu { get; set; }
    AuthUserDto user = new AuthUserDto();
    private MudTextField<string>? focusTarget;
    bool success;
    bool Success
    {
        get { return success; }
        set { success = value;
            //if(value == true)
            //{
            //    HandleLogin();
            //}
        }
    }
    private string errorMsg = string.Empty;
    bool passChangeRequired = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            if (focusTarget != null)
                await focusTarget.SelectAsync();
    }

    async Task HandleLogin()
    {
        Console.WriteLine("WILL SOO HANDLE LOGGING INT");
        bool stayLogged = true; //sutvarkyt
        if (await _authService.Login(user, stayLogged))
        {
            errorMsg = string.Empty;
            _navigationManager.NavigateTo("/");
            Console.WriteLine("Login success...!!!!");
        }
        else
        {
            errorMsg = "Nesutampa vartotojo vardas ir slaptažodis";
            // and the rest of possible errors... in real programs or later
        }

    }
    //async Task HandlePasswordChange()
    //{
    //    if (password.CompareTo(password2) != 0)
    //    {
    //        errorMsg = "New passwords do not match. Please enter identical passwords in both fields.";
    //    }
    //    PasswordChangeDto dto = new PasswordChangeDto(user.Username, password);
    //    HttpResponseMessage result = await Http.PatchAsJsonAsync("/api/users/passchange", dto);
    //    if (result.IsSuccessStatusCode)
    //    {
    //        passChangeRequired = false;
    //        msgColor = "black";
    //        errorMsg = "Password successfully changed. You can now login again using new password.";
    //    }
    //    else
    //    {
    //        errorMsg = "Password change failed. Please try again.";
    //    }
    //}
}