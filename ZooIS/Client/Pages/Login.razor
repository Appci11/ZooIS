@page "/login"
@using ZooIS.Shared.Dto;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<body>
    <h3>Login</h3>

    <EditForm Model="user" OnSubmit="HandleLogin">
        <div>
            <InputText id="username" @bind-Value="user.Username" @ref=inputTextForFocus />
            <label for="username">Name</label>
        </div>
        <div>
            <InputText id="password" @bind-Value="user.Password" type="password" />
            <label for="password">Password</label>
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </EditForm>
    <br />

    @if (passChangeRequired)
    {
        <EditForm Model="password" OnSubmit="HandlePasswordChange">
            <div>
                <InputText id="password" @bind-Value="password" type="password" />
                <label for="password">New password</label>
            </div>
            <div>
                <InputText id="password2" @bind-Value="password2" type="password" />
                <label for="password2">Repeat new password</label>
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Change</button>
            </div>
        </EditForm>
    }
    <br />
    <p style="color: @msgColor">@ErrorMsg</p>
    <br />
    <div>
        Not a member? <a href="register">Register</a>
    </div>
</body>

@code {
    UserLoginDto user = new UserLoginDto();
    private InputText? inputTextForFocus;
    private string ErrorMsg = string.Empty;
    string password = string.Empty;
    string password2 = string.Empty;
    bool passChangeRequired = false;
    string msgColor = "red";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            if (inputTextForFocus?.Element != null)
                await inputTextForFocus.Element.Value.FocusAsync();
    }

    async Task HandleLogin()
    {
        HttpResponseMessage result = await Http.PostAsJsonAsync("/api/login", user);
        if (result.IsSuccessStatusCode)
        {
            LoginDto? loginDto = await result.Content.ReadFromJsonAsync<LoginDto>();
            if (!loginDto.PassResetRequest)
            {
                await LocalStorage.SetItemAsync("token", loginDto.AuthToken);
                await AuthStateProvider.GetAuthenticationStateAsync();
                ErrorMsg = string.Empty;
                NavigationManager.NavigateTo($"/");
            }
            else
            {
                ErrorMsg = "Password change required. Please change your password.";
                passChangeRequired = true;
            }
        }
        else
        {
            ErrorMsg = "Incorrect username or password!";
        }
    }
    async Task HandlePasswordChange()
    {
        if(password.CompareTo(password2) != 0)
        {
            ErrorMsg = "New passwords do not match. Please enter identical passwords in both fields.";
        }
        PasswordChangeDto dto = new PasswordChangeDto(user.Username, password);
        HttpResponseMessage result = await Http.PatchAsJsonAsync("/api/users/passchange", dto);
        if (result.IsSuccessStatusCode)
        {
            passChangeRequired = false;
            msgColor = "black";
            ErrorMsg = "Password successfully changed. You can now login again using new password.";
        }
        else
        {
            ErrorMsg = "Password change failed. Please try again.";
        }

    }
}
