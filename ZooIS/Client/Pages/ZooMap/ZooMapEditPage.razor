@page "/map/edit"
@using ZooIS.Client.Services.PicturesService
@using ZooIS.Client.Services.ZooMapService
@using ZooIS.Shared.Models.MapAreaModels
@using ZooIS.Client.Services.AreasService
@inject IZooMapService _zooMapService
@inject IPicturesService _picturesService
@inject IDialogService _dialogService
@inject IAreasService _areasService

@if (loaded)
{
    <MudPaper Class="d-inline-flex pa-4" Elevation="0">
        <MudPaper Elevation="0">
            <MudPaper Elevation="0" Style="height:700px; max-width:1000px; overflow:scroll;">
                <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true">
                    <ActivatorContent>
                        <svg width="@pictureCoordinates.X" height="@pictureCoordinates.Y" viewBox="0 0 @pictureCoordinates.X @pictureCoordinates.Y" tabindex="0"
                             style="background-color:rgb(255, 255, 255); outline:none; @cursor"
                         @onclick="@((e) => LeftClickOnSVG(e.OffsetX, e.OffsetY))"
                         @onmousemove="SetCurrentXY"
                         @onmouseup="MouseUpOnSVG"
                         @onkeyup="KeyPressed">

                            <image pointer-events="none" xlink:href="api/pictures/0" />

                            <!--Add all areas-->
                            @foreach (AreaDrawData item in _zooMapService.Map.AreasData)
                            {
                                @if (item.PolyCoordinates.Count > 1)
                                {
                                    <path pointer-events="none" stroke-miterlimit="10" fill="#ffffff" stroke="rgb(0, 0, 0)"
                                          d="@(GetCoordinatesInString(item.PolyCoordinates))" />
                                }
                            }
                            <!--Add area being drawn-->
                            @if (CurrentDrawCoordinates.Count > 1)
                            {
                                <path pointer-events="none" stroke-miterlimit="10" fill="#ffffff" fill-opacity="0.5" stroke="rgb(0, 0, 0)"
                                      d="@(GetCoordinatesInString(CurrentDrawCoordinates))" />
                            }

                            <!--Add all numbers-->
                            @foreach (AreaDrawData item in _zooMapService.Map.AreasData)
                            {
                                @if (null != item.TextCoordinates)
                                {
                                    <g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="20px" style="user-select:none">
                                        <text x="@item.TextCoordinates.X" y="@item.TextCoordinates.Y"
                                  @onmousedown="@(e => MouseDownOnNumber(e, item))">
                                            @item.Nr
                                        </text>
                                    </g>
                                }
                            }
                            <!--Add shadow number when "dragging"-->
                            @if (dragingNumber)
                            {
                                <g fill="rgb(0, 0, 0)" fill-opacity="0.5" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="20px" style="user-select:none">
                                    <text x="@numberX" y="@numberY">
                                        @numberDragged
                                    </text>
                                </g>
                            }
                        </svg>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="StartDrawing">Brėžti naują</MudMenuItem>
                        <MudMenuItem OnClick="FinishDrawing">Baigti brėžimą</MudMenuItem>
                        <MudMenuItem OnClick="RemoveLastPoint" Disabled="!addingPoints">Šalinti paskutinį tašką</MudMenuItem>
                        <MudMenuItem OnClick="RemoveLastArea" Disabled="@(_zooMapService.Map.AreasData.Count > 0 ? false : true)">Šalinti paskutinę zoną</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </MudPaper>
        </MudPaper>
        <MudPaper Elevation="0" Style="margin-left:10px;">
            <MudChip OnClick="StartDrawing" Disabled="addingPoints" Color="Color.Primary">Brėžti</MudChip><span>- naują zoną.</span><br />
            <MudChip OnClick="FinishDrawing" Disabled="!addingPoints" Color="Color.Primary">Baigti</MudChip><span>- zonos brėžimą. + Vardo suteikimas.</span><br />
            <MudChip OnClick="RemoveLastPoint" Disabled="@(CurrentDrawCoordinates.Count > 0 ? false : true)" Color="Color.Primary">Šalinti</MudChip><span>- paskutinį brėžimo tašką.</span><br />
            <MudChip OnClick="RemoveLastArea" Disabled="@(_zooMapService.Map.AreasData.Count > 0 ? false : true)" Color="Color.Secondary">Šalinti</MudChip><span>- paskutinę zoną.</span><br />
        </MudPaper>
    </MudPaper>
}
else
{
    <span>Laukiama serverio duomenų...</span>
}
@code {
    bool loaded;
    List<Coordinates> CurrentDrawCoordinates { get; set; } = new();
    AreaDrawData? helperData;    //skaiciaus kilnojimui
    Coordinates pictureCoordinates = new(50, 50);
    int numberDragged;
    double numberX;
    double numberY;
    string state = "Not Drawing.";
    string cursor = "cursor:default;";    //2 reiksmes tik, no enum...

    bool addingPoints = false;
    bool dragingNumber = false;
    bool areasChanged = false;


    protected override async Task OnInitializedAsync()
    {
        //byte[] bytes;
        //bytes = await _http.GetByteArrayAsync("img/ZOO_teritorija.webp");
        //string eil = Convert.ToBase64String(bytes);
        //Console.WriteLine(eil);
        pictureCoordinates = await _picturesService.GetPictureCoordinates(0);
        await LoadMap();
        loaded = true;
    }

    async Task LoadMap()
    {
        if (await _zooMapService.GetMap())
        {
            areasChanged = false;
        }
    }

    async Task SaveMap()
    {
        if (await _zooMapService.AddMap(_zooMapService.Map))
        {
            Console.WriteLine("Service_MapSavingSuccess");
            areasChanged = false;
        }
    }

    void SetCurrentXY(MouseEventArgs args)
    {
        if (dragingNumber)
        {
            numberX = args.OffsetX;
            numberY = args.OffsetY;
        }
    }

    void MouseDownOnNumber(MouseEventArgs args, AreaDrawData data)
    {
        Console.WriteLine($"Mouse-Down on Number: {data.Nr}");
        numberDragged = data.Nr;
        helperData = data;
        dragingNumber = true;
    }

    async void MouseUpOnSVG(MouseEventArgs args)
    {
        Console.WriteLine($"Mouse-UP on SVG  X = {args.OffsetX}  Y = {args.OffsetY}");
        if (dragingNumber)
        {
            helperData.TextCoordinates.X = args.OffsetX;
            helperData.TextCoordinates.Y = args.OffsetY;
            dragingNumber = false;
            await SaveMap();  //Sutvarkyt jei netingesiu i ka nors gudresnio pakeist
        }
    }

    void LeftClickOnSVG(double x, double y)
    {
        Console.WriteLine("Pressed on Picture!");
        if (!addingPoints) return;
        CurrentDrawCoordinates.Add(new Coordinates(x, y));
    }

    void RemoveLastPoint()
    {
        Console.WriteLine("Removing last point");
        if (CurrentDrawCoordinates.Count > 0)
        {
            CurrentDrawCoordinates.RemoveAt(CurrentDrawCoordinates.Count - 1);
        }
    }

    void KeyPressed(KeyboardEventArgs args)
    {
        if (args.Code == "KeyZ" && args.CtrlKey)
        {
            Console.WriteLine("CTRL + Z pressed!");
            RemoveLastPoint();
        }
    }

    void StartDrawing()
    {
        state = "Drawing";
        CurrentDrawCoordinates = new();
        addingPoints = true;
        cursor = "cursor:crosshair;";
    }

    async void FinishDrawing()
    {
        addingPoints = false;
        state = "Not Drawing.";
        // Sutvarkyt. Issaugo tvarkingai, bet kol senosios rodykles i kazka rodo
        // tol UI atsisako priimt pakeitimus...
        // galima ir pasalint, nes dirba teisingai
        cursor = "cursor:default;";
        string eil = await OpenAddAreaDialog();
        if (eil != string.Empty)
        {
            int nr = _zooMapService.Map.AreasData.Count + 1;
            _zooMapService.Map.AreasData.Add(new AreaDrawData
                {
                    Nr = nr,
                    PolyCoordinates = CurrentDrawCoordinates,
                    TextCoordinates = new(CurrentDrawCoordinates[0].X, CurrentDrawCoordinates[0].Y)
                });
            await _areasService.CreateArea(new Area
                {
                    Nr = nr,
                    Name = eil
                });
            await SaveMap();
            areasChanged = true;
            CurrentDrawCoordinates = new();
        }
    }

    async void RemoveLastArea()
    {
        var parameters = new DialogParameters();
        parameters.Add("BodyText", "Tikrai pašalinti paskutinę zoną?");
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = _dialogService.Show<ConfirmDeletionDialog>("Šalinimas", parameters, options);
        if (!(await dialog.Result).Canceled)
        {
            int nr = _zooMapService.Map.AreasData.Count;
            if (_zooMapService.Map.AreasData.Count > 0)
            {
                _zooMapService.Map.AreasData.RemoveAt(nr - 1);
                areasChanged = true;
            }
            await _areasService.DeleteAreaByNr(nr);
            await SaveMap();
            if(nr == 1)
            {
                await _areasService.GetAreas();
            }
            StateHasChanged();
        }
    }

    static string GetCoordinatesInString(List<Coordinates> cordinates)
    {
        if (cordinates.Count < 1) return string.Empty;
        String result = $"M {cordinates[0].X} {cordinates[0].Y}";
        for (int i = 1; i < cordinates.Count; i++)
        {
            result += $" L {cordinates[i].X} {cordinates[i].Y}";
        }
        result += " Z";
        return result;
    }

    async Task<string> OpenAddAreaDialog()
    {
        var dialog = await _dialogService.ShowAsync<EnterNameDialog>();
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            string eil = result.Data.ToString()!;
            if (eil.Length > 0)
            {
                return eil;
            }
        }
        return string.Empty;
    }
}