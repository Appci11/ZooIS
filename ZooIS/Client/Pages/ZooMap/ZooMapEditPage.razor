@page "/map/edit"
@using ZooIS.Shared.Models.MapAreaModels;

<MudPaper Class="d-inline-flex pa-4" Elevation="0">
    <MudPaper Elevation="0">
        @if (loaded)
        {
            <MudPaper Elevation="0" Style="height:600px; width:600px; overflow:scroll;">
                <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true">
                    <ActivatorContent>
                        <svg width="2000" height="1809" viewBox="0 0 2000 1809" tabindex="0"
                             style=" background-color: rgb(255, 255, 255); outline:none; @cursor"
                         @onclick="@((e) => LeftClickOnSVG(e.OffsetX, e.OffsetY))"
                         @onmousemove="SetCurrentXY"
                         @onmouseup="MouseUpOnSVG"
                         @onkeyup="KeyPressed">

                            <image pointer-events="none" x="-1.5" y="-0.5" width="2000" height="1809" xlink:href="api/pictures" />

                            <!--Add all areas-->
                            @foreach (AreaDrawData item in AreasData)
                            {
                                @if (item.PolyCoordinates.Count > 1)
                                {
                                    <path pointer-events="none" stroke-miterlimit="10" fill="#ffffff" stroke="rgb(0, 0, 0)"
                                          d="@(GetCoordinatesInString(item.PolyCoordinates))" />
                                }
                            }
                            <!--Add area being drawn-->
                            @if (CurrentDrawCoordinates.Count > 1)
                            {
                                <path pointer-events="none" stroke-miterlimit="10" fill="#ffffff" fill-opacity="0.5" stroke="rgb(0, 0, 0)"
                                      d="@(GetCoordinatesInString(CurrentDrawCoordinates))" />
                            }

                            <!--Add all numbers-->
                            @foreach (AreaDrawData item in AreasData)
                            {
                                @if (null != item.TextCoordinates)
                                {
                                    <g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="20px" style="user-select:none">
                                        <text x="@item.TextCoordinates.X" y="@item.TextCoordinates.Y"
                                  @onmousedown="@(e => MouseDownOnNumber(e, item))">
                                            @item.Nr
                                        </text>
                                    </g>
                                }
                            }
                            <!--Add shadow number when "dragging"-->
                            @if (dragingNumber)
                            {
                                <g fill="rgb(0, 0, 0)" fill-opacity="0.5" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="20px" style="user-select:none">
                                    <text x="@numberX" y="@numberY">
                                        @numberDragged
                                    </text>
                                </g>
                            }
                        </svg>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="StartDrawing">Brėžti naują</MudMenuItem>
                        <MudMenuItem OnClick="FinishDrawing">Baigti brėžimą</MudMenuItem>
                        <MudMenuItem OnClick="RemoveLastPoint" Disabled="!addingPoints">Šalinti paskutinį tašką</MudMenuItem>
                        <MudMenuItem OnClick="RemoveLastArea" Disabled="@(AreasData.Count > 0 ? false : true)">Šalinti paskitinę zoną</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </MudPaper>
        }
    </MudPaper>
    <MudPaper Elevation="0" Style="margin-left:10px;">
        <MudButton Class="cursor-not-allowed" Color="Color.Primary" Variant="Variant.Filled">Delete</MudButton>
        <h1>state: @state</h1>
        <button @onclick="StartDrawing">StartDrawing</button>
        <button @onclick="FinishDrawing">FinishDrawing</button>
    </MudPaper>
</MudPaper>




@*
<img src="api/pictures"/>
*@
@code {
    bool loaded;
    List<AreaDrawData> AreasData = new();
    List<Coordinates> CurrentDrawCoordinates { get; set; } = new();
    AreaDrawData helperData;
    bool dragingNumber = false;
    int numberDragged;
    double numberX;
    double numberY;
    string state = "Not Drawing.";
    string cursor = "cursor:default;";    //2 reiksmes tik, no enum...
    bool addingPoints = false;
    //double currentX;
    //double currentY;

    protected override async Task OnInitializedAsync()
    {
        //byte[] bytes;
        //bytes = await _http.GetByteArrayAsync("img/ZOO_teritorija.webp");
        //string eil = Convert.ToBase64String(bytes);
        //Console.WriteLine(eil);
        loaded = true;
    }

    void SetCurrentXY(MouseEventArgs args)
    {
        if (dragingNumber)
        {
            numberX = args.OffsetX;
            numberY = args.OffsetY;
        }
    }

    void MouseDownOnNumber(MouseEventArgs args, AreaDrawData data)
    {
        Console.WriteLine($"Mouse-Down on Number: {data.Nr}");
        numberDragged = data.Nr;
        helperData = data;
        dragingNumber = true;
    }

    void MouseUpOnSVG(MouseEventArgs args)
    {
        Console.WriteLine($"Mouse-UP on SVG  X = {args.OffsetX}  Y = {args.OffsetY}");
        if (dragingNumber)
        {
            helperData.TextCoordinates.X = args.OffsetX;
            helperData.TextCoordinates.Y = args.OffsetY;
            dragingNumber = false;
        }
    }

    void LeftClickOnSVG(double x, double y)
    {
        Console.WriteLine("Pressed on Picture!");
        if (!addingPoints) return;
        CurrentDrawCoordinates.Add(new Coordinates(x, y));
    }

    void RemoveLastPoint()
    {
        Console.WriteLine("Removing last point");
        if (CurrentDrawCoordinates.Count > 0)
        {
            CurrentDrawCoordinates.RemoveAt(CurrentDrawCoordinates.Count - 1);
        }
    }

    void KeyPressed(KeyboardEventArgs args)
    {
        if (args.Code == "KeyZ" && args.CtrlKey)
        {
            Console.WriteLine("CTRL + Z pressed!");
            RemoveLastPoint();
        }
    }

    void StartDrawing()
    {
        state = "Drawing.";
        CurrentDrawCoordinates = new();
        addingPoints = true;
        cursor = "cursor:crosshair;";
    }

    void FinishDrawing()
    {
        addingPoints = false;
        state = "Not Drawing.";
        AreasData.Add(new AreaDrawData
            {
                Nr = AreasData.Count + 1,
                PolyCoordinates = CurrentDrawCoordinates,
                TextCoordinates = new(CurrentDrawCoordinates[0].X, CurrentDrawCoordinates[0].Y)
            });

        // Sutvarkyt. Issaugo tvarkingai, bet kol senosios rodykles i kazka rodo
        // tol UI atsisako priimt pakeitimus...
        // baigus testuot, galima ir pasalint, nes dirba teisingai, kad ui nemato naujausio NR nesvarbu
        CurrentDrawCoordinates = new();
        cursor = "cursor:default;";
    }

    void RemoveLastArea()
    {
        if (AreasData.Count > 0)
        {
            AreasData.RemoveAt(AreasData.Count - 1);
        }
    }

    static string GetCoordinatesInString(List<Coordinates> cordinates)
    {
        if (cordinates.Count < 1) return string.Empty;
        String result = $"M {cordinates[0].X} {cordinates[0].Y}";
        for (int i = 1; i < cordinates.Count; i++)
        {
            result += $" L {cordinates[i].X} {cordinates[i].Y}";
        }
        result += " Z";
        return result;
    }
}