@using ZooIS.Client.Services.ZooMapService;
@using ZooIS.Shared.Models.MapAreaModels
@using ZooIS.Client.Services.PicturesService
@inject IZooMapService _zooMapService
@inject IJSRuntime _jsRuntime
@inject IPicturesService _picturesService

@if (loaded)
{
    <MudPaper Elevation="0">
        <svg width="@mapWidth" height="@mapHeight" viewBox="0 0 @pictureCoordinates.X @pictureCoordinates.Y" style="background-color: rgb(255, 255, 255);">
            @if (ShowMap)
            {
                <image xlink:href="api/pictures/0" />
            }
            @if (ShowAreas)
            {

                <path @onclick="@(() => Console.WriteLine("Click Success!!"))" fill="@AreaData.FillColor" stroke="@AreaData.StrokeColor" d="@(GetCoordinatesInString(AreaData.PolyCoordinates))" stroke-miterlimit="10" pointer-events="all" />
                @foreach (AreaDrawData item in AreasData)
                {
                    <path @onclick="@(() => MapPartId.InvokeAsync(item.Nr))" fill="@item.FillColor" stroke="@item.StrokeColor" d="@(GetCoordinatesInString(item.PolyCoordinates))" stroke-miterlimit="10" pointer-events="all" />
                }
            }
            @if (ShowAreaNumbers)
            {
                @foreach (AreaDrawData item in AreasData)
                {
                    <g fill="rgb(0, 0, 0)" font-family="Helvetica" font-weight="bold" text-anchor="middle" font-size="20px">
                        <text disabled x="@item.TextCoordinates.X" y="@item.TextCoordinates.Y" pointer-events="none">@item.Nr</text>
                    </g>
                }
            }
        </svg>
    </MudPaper>
}
@code {
    [Parameter]
    public EventCallback<int> MapPartId { get; set; }
    [Parameter]
    public bool ShowMap { get; set; } = true;
    [Parameter]
    public bool ShowAreas { get; set; } = true;
    [Parameter]
    public bool ShowAreaNumbers { get; set; } = true;
    [Parameter]
    public bool ViewForVisitors { get; set; } = false;
    [Parameter]
    public double ZoomLevel
    {
        set
        {
            zoomLevel = value + defaultZoomLevel;
            currentWidth = 2000 * zoomLevel;
            currentHeight = 1809 * zoomLevel;
            mapWidth = $"{currentWidth}px";
            mapHeight = $"{currentHeight}px";
            StateHasChanged();
        }
        get
        {
            return zoomLevel;
        }
    }
    [Parameter]
    public string[] MapAreaFillColors { get; set; } = new string[35];
    bool loaded;
    Coordinates pictureCoordinates = new(50, 50);
    const double defaultZoomLevel = 0.5;

    double zoomLevel = defaultZoomLevel;
    double currentWidth = 2000;
    double currentHeight = 1809;
    string mapWidth = "2000px";
    string mapHeight = "1809px";

    AreaDrawData AreaData = new();
    List<AreaDrawData> AreasData = new();

    protected override async Task OnInitializedAsync()
    {
        pictureCoordinates = await _picturesService.GetPictureCoordinates(0);
        if (_zooMapService.Map != null)
        {
            AreasData = _zooMapService.Map.AreasData;
        }
        loaded = true;
    }

    static string GetCoordinatesInString(List<Coordinates> cordinates)
    {
        if (cordinates.Count < 1) return string.Empty;
        String result = $"M {cordinates[0].X} {cordinates[0].Y}";
        for (int i = 1; i < cordinates.Count; i++)
        {
            result += $" L {cordinates[i].X} {cordinates[i].Y}";
        }
        result += " Z";
        return result;
    }
}